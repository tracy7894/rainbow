#!/usr/bin/env node

/**
 * Module dependencies.
 */
const db=require('../db/db')

db(()=>{
  var app = require('../app');
  var debug = require('debug')('rainbow:server');
  var http = require('http');

  //聊天室
  const { v4: uuidv4 } = require("uuid");
  const moment = require("moment");
  const  fs = require('fs');
  var server = http.createServer(app);
  const io = require('socket.io')(server, {
    cors: {
        origin: "*", // 或者指定允許的來源
        methods: ["GET", "POST"],
        allowedHeaders: ["my-custom-header"],
        credentials: true
    }
  });
  /**
   * Get port from environment and store in Express.
   */
  
  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);
  
  /**
   * Create HTTP server.
   */
  
  
  /**
   * Listen on provided port, on all network interfaces.
   */
  
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  
  /**
   * Normalize a port into a number, string, or false.
   */
  io.on('connection', function(socket) {
    console.log('A user connected');
  
    socket.on('message', (msg) => {
      console.log('Received message:', msg);
      io.emit('message', msg);
    });
  });
  
  
  function normalizePort(val) {
    var port = parseInt(val, 10);
  
    if (isNaN(port)) {
      // named pipe
      return val;
    }
  
    if (port >= 0) {
      // port number
      return port;
    }
  
    return false;
  }
  
  /**
   * Event listener for HTTP server "error" event.
   */

  // io.on('connection', function (socket) {
  //   console.log('A user connected');  // 確認用戶連接
  //   socket.emit('news', { hello: 'world' });
    
  //   socket.on('my other event', function (data) {
  //     console.log(data);  // 輸出接收到的數據
  //   });
  // });
//console.log(io);
// 检测连接事件

  
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }
  
    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;
  
    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }
  
  /**
   * Event listener for HTTP server "listening" event.
   */
  
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }})


