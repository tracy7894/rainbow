#!/usr/bin/env node

//import { group } from 'console';
const { group } = require('console');
/**
 * Module dependencies.
 */
const db=require('../db/db')

db(()=>{
  var app = require('../app');
  var debug = require('debug')('rainbow:server');
  var http = require('http');

  const { v4: uuidv4 } = require("uuid");
  const moment = require("moment");
  const  fs = require('fs');
  var server = http.createServer(app);
  

  const io = require('socket.io')(server, {   
    cors: {
        origin: "*", // 指定允許的來源
        methods: ["GET", "POST"],
        allowedHeaders: ["my-custom-header"],
        credentials: true
    }
  });
  /**
   * Get port from environment and store in Express.
   */
  
  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);
  
  /**
   * Create HTTP server.
   */
  
  
  /**
   * Listen on provided port, on all network interfaces.
   */
  
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  
  /**
   * Normalize a port into a number, string, or false.
   */
  /*
   *聊天室                        
  */
  const MessageData = require('../data/MessageData'); //

  io.on('connection', async function(socket) {
    const groupId = socket.handshake.query.groupId;
    if (!groupId) {
      console.error('No groupId provided');
      socket.disconnect();
      return;
    }
    socket.join(groupId);
    console.log(`A user connected to group: ${groupId}`);

  try {
    const chatHistory = await MessageData.find({ groupId: groupId })
        .sort({ createdAt: -1 })  // 以時間倒序排列
        .limit(200);  // 最近 200 條訊息
        const orderedChatHistory = chatHistory.reverse();
    // 發送歷史記錄給當前用戶
    socket.emit('chatHistory',orderedChatHistory); // 返回升序排列的訊息
  } catch (err) {
    console.error('讀取歷史記錄失敗:', err);
  }

    // 處理文字消息
  socket.on('message', async (msg) => {
      console.log('Received message:', msg);
      const newMessage = new MessageData({
            username: msg.username,
            message: msg.message,
            groupId:msg.groupId
        });

        // 儲存文字訊息
        newMessage.save()
            .then(() => {
                console.log('訊息已儲存到資料庫');
                io.to(msg.groupId).emit('message', msg)  
            })
            .catch(err => {
                console.error('儲存訊息失敗:', err);
            });
    });

    // 圖片
    socket.on('image', async(data) => {
      console.log(`${data.username} 發送了一張圖片 ${data.groupId}`);
     
      const newImageMessage = new MessageData({
          username: data.username,
          image: data.image, // 圖片的 base64 字符串
          groupId: data.groupId, 
      });
  
      newImageMessage.save()
          .then(() => {
              console.log('圖片已儲存到資料庫');
              io.to(data.groupId).emit('image', data);  
          })
          .catch(err => {
              console.error('儲存圖片失敗:', err);
          });
  });

    socket.on('disconnect', () => {
        console.log('一位使用者已離開');
    });
});
  
  function normalizePort(val) {
    var port = parseInt(val, 10);
  
    if (isNaN(port)) {
      // named pipe
      return val;
    }
  
    if (port >= 0) {
      // port number
      return port;
    }
  
    return false;
  }
  
  /**
   * Event listener for HTTP server "error" event.
   */

  
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }
  
    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;
  
    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }
  
  /**
   * Event listener for HTTP server "listening" event.
   */
  
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }})


